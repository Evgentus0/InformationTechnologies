// source: src/app/protos/dbmsCore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dbmsCore.AddColumnRequest', null, global);
goog.exportSymbol('proto.dbmsCore.BaseReply', null, global);
goog.exportSymbol('proto.dbmsCore.Column', null, global);
goog.exportSymbol('proto.dbmsCore.ConditionsFieldEntry', null, global);
goog.exportSymbol('proto.dbmsCore.CreateDbRequest', null, global);
goog.exportSymbol('proto.dbmsCore.CrossJoinRequest', null, global);
goog.exportSymbol('proto.dbmsCore.DeleteRequest', null, global);
goog.exportSymbol('proto.dbmsCore.DropColumnRequst', null, global);
goog.exportSymbol('proto.dbmsCore.GetEntityReply', null, global);
goog.exportSymbol('proto.dbmsCore.GetEntityRequest', null, global);
goog.exportSymbol('proto.dbmsCore.GetTableListReply', null, global);
goog.exportSymbol('proto.dbmsCore.GetTableListRequest', null, global);
goog.exportSymbol('proto.dbmsCore.InsertRequest', null, global);
goog.exportSymbol('proto.dbmsCore.Row', null, global);
goog.exportSymbol('proto.dbmsCore.SelectReply', null, global);
goog.exportSymbol('proto.dbmsCore.SelectRequest', null, global);
goog.exportSymbol('proto.dbmsCore.TableRequest', null, global);
goog.exportSymbol('proto.dbmsCore.UnionRequest', null, global);
goog.exportSymbol('proto.dbmsCore.UpdateRequest', null, global);
goog.exportSymbol('proto.dbmsCore.Validator', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.GetEntityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.GetEntityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.GetEntityRequest.displayName = 'proto.dbmsCore.GetEntityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.Column.displayName = 'proto.dbmsCore.Column';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.GetEntityReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.GetEntityReply.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.GetEntityReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.GetEntityReply.displayName = 'proto.dbmsCore.GetEntityReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.Validator.displayName = 'proto.dbmsCore.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.AddColumnRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.AddColumnRequest.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.AddColumnRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.AddColumnRequest.displayName = 'proto.dbmsCore.AddColumnRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.DropColumnRequst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.DropColumnRequst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.DropColumnRequst.displayName = 'proto.dbmsCore.DropColumnRequst';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.DeleteRequest.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.DeleteRequest.displayName = 'proto.dbmsCore.DeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.Row.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.Row.displayName = 'proto.dbmsCore.Row';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.InsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.InsertRequest.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.InsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.InsertRequest.displayName = 'proto.dbmsCore.InsertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.ConditionsFieldEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.ConditionsFieldEntry.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.ConditionsFieldEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.ConditionsFieldEntry.displayName = 'proto.dbmsCore.ConditionsFieldEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.UpdateRequest.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.UpdateRequest.displayName = 'proto.dbmsCore.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.SelectRequest.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.SelectRequest.displayName = 'proto.dbmsCore.SelectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.UnionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.UnionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.UnionRequest.displayName = 'proto.dbmsCore.UnionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.CrossJoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.CrossJoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.CrossJoinRequest.displayName = 'proto.dbmsCore.CrossJoinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.SelectReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.SelectReply.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.SelectReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.SelectReply.displayName = 'proto.dbmsCore.SelectReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.CreateDbRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.CreateDbRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.CreateDbRequest.displayName = 'proto.dbmsCore.CreateDbRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.TableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.TableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.TableRequest.displayName = 'proto.dbmsCore.TableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.GetTableListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.GetTableListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.GetTableListRequest.displayName = 'proto.dbmsCore.GetTableListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.GetTableListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dbmsCore.GetTableListReply.repeatedFields_, null);
};
goog.inherits(proto.dbmsCore.GetTableListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.GetTableListReply.displayName = 'proto.dbmsCore.GetTableListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dbmsCore.BaseReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dbmsCore.BaseReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dbmsCore.BaseReply.displayName = 'proto.dbmsCore.BaseReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.GetEntityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.GetEntityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.GetEntityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetEntityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.GetEntityRequest}
 */
proto.dbmsCore.GetEntityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.GetEntityRequest;
  return proto.dbmsCore.GetEntityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.GetEntityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.GetEntityRequest}
 */
proto.dbmsCore.GetEntityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.GetEntityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.GetEntityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.GetEntityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetEntityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.GetEntityRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetEntityRequest} returns this
 */
proto.dbmsCore.GetEntityRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.GetEntityRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetEntityRequest} returns this
 */
proto.dbmsCore.GetEntityRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datavaluetype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.Column}
 */
proto.dbmsCore.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.Column;
  return proto.dbmsCore.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.Column}
 */
proto.dbmsCore.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatavaluetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatavaluetype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dbmsCore.Column.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.Column} returns this
 */
proto.dbmsCore.Column.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 dataValueType = 2;
 * @return {number}
 */
proto.dbmsCore.Column.prototype.getDatavaluetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.Column} returns this
 */
proto.dbmsCore.Column.prototype.setDatavaluetype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.GetEntityReply.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.GetEntityReply.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.GetEntityReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.GetEntityReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetEntityReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.dbmsCore.Column.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.GetEntityReply}
 */
proto.dbmsCore.GetEntityReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.GetEntityReply;
  return proto.dbmsCore.GetEntityReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.GetEntityReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.GetEntityReply}
 */
proto.dbmsCore.GetEntityReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.dbmsCore.Column;
      reader.readMessage(value,proto.dbmsCore.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.GetEntityReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.GetEntityReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.GetEntityReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetEntityReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dbmsCore.Column.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.dbmsCore.GetEntityReply.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.GetEntityReply} returns this
 */
proto.dbmsCore.GetEntityReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.dbmsCore.GetEntityReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetEntityReply} returns this
 */
proto.dbmsCore.GetEntityReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stackTrace = 3;
 * @return {string}
 */
proto.dbmsCore.GetEntityReply.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetEntityReply} returns this
 */
proto.dbmsCore.GetEntityReply.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.dbmsCore.GetEntityReply.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetEntityReply} returns this
 */
proto.dbmsCore.GetEntityReply.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Column columns = 5;
 * @return {!Array<!proto.dbmsCore.Column>}
 */
proto.dbmsCore.GetEntityReply.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.dbmsCore.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Column, 5));
};


/**
 * @param {!Array<!proto.dbmsCore.Column>} value
 * @return {!proto.dbmsCore.GetEntityReply} returns this
*/
proto.dbmsCore.GetEntityReply.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.dbmsCore.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Column}
 */
proto.dbmsCore.GetEntityReply.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.dbmsCore.Column, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.GetEntityReply} returns this
 */
proto.dbmsCore.GetEntityReply.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    datavaluetype: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.Validator}
 */
proto.dbmsCore.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.Validator;
  return proto.dbmsCore.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.Validator}
 */
proto.dbmsCore.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatavaluetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDatavaluetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.dbmsCore.Validator.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.Validator} returns this
 */
proto.dbmsCore.Validator.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 operation = 2;
 * @return {number}
 */
proto.dbmsCore.Validator.prototype.getOperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.Validator} returns this
 */
proto.dbmsCore.Validator.prototype.setOperation = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string dataValueType = 3;
 * @return {string}
 */
proto.dbmsCore.Validator.prototype.getDatavaluetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.Validator} returns this
 */
proto.dbmsCore.Validator.prototype.setDatavaluetype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.AddColumnRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.AddColumnRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.AddColumnRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.AddColumnRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.AddColumnRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    datavaluetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.dbmsCore.Validator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.AddColumnRequest}
 */
proto.dbmsCore.AddColumnRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.AddColumnRequest;
  return proto.dbmsCore.AddColumnRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.AddColumnRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.AddColumnRequest}
 */
proto.dbmsCore.AddColumnRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatavaluetype(value);
      break;
    case 5:
      var value = new proto.dbmsCore.Validator;
      reader.readMessage(value,proto.dbmsCore.Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.AddColumnRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.AddColumnRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.AddColumnRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.AddColumnRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatavaluetype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dbmsCore.Validator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.AddColumnRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
 */
proto.dbmsCore.AddColumnRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.AddColumnRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
 */
proto.dbmsCore.AddColumnRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string columnName = 3;
 * @return {string}
 */
proto.dbmsCore.AddColumnRequest.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
 */
proto.dbmsCore.AddColumnRequest.prototype.setColumnname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 dataValueType = 4;
 * @return {number}
 */
proto.dbmsCore.AddColumnRequest.prototype.getDatavaluetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
 */
proto.dbmsCore.AddColumnRequest.prototype.setDatavaluetype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Validator validators = 5;
 * @return {!Array<!proto.dbmsCore.Validator>}
 */
proto.dbmsCore.AddColumnRequest.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.dbmsCore.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Validator, 5));
};


/**
 * @param {!Array<!proto.dbmsCore.Validator>} value
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
*/
proto.dbmsCore.AddColumnRequest.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.dbmsCore.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Validator}
 */
proto.dbmsCore.AddColumnRequest.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.dbmsCore.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.AddColumnRequest} returns this
 */
proto.dbmsCore.AddColumnRequest.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.DropColumnRequst.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.DropColumnRequst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.DropColumnRequst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.DropColumnRequst.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    columnname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.DropColumnRequst}
 */
proto.dbmsCore.DropColumnRequst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.DropColumnRequst;
  return proto.dbmsCore.DropColumnRequst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.DropColumnRequst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.DropColumnRequst}
 */
proto.dbmsCore.DropColumnRequst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.DropColumnRequst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.DropColumnRequst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.DropColumnRequst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.DropColumnRequst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.DropColumnRequst.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.DropColumnRequst} returns this
 */
proto.dbmsCore.DropColumnRequst.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.DropColumnRequst.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.DropColumnRequst} returns this
 */
proto.dbmsCore.DropColumnRequst.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string columnName = 3;
 * @return {string}
 */
proto.dbmsCore.DropColumnRequst.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.DropColumnRequst} returns this
 */
proto.dbmsCore.DropColumnRequst.prototype.setColumnname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.DeleteRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    guidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.DeleteRequest}
 */
proto.dbmsCore.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.DeleteRequest;
  return proto.dbmsCore.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.DeleteRequest}
 */
proto.dbmsCore.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGuids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGuidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.DeleteRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.DeleteRequest} returns this
 */
proto.dbmsCore.DeleteRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.DeleteRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.DeleteRequest} returns this
 */
proto.dbmsCore.DeleteRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string guids = 3;
 * @return {!Array<string>}
 */
proto.dbmsCore.DeleteRequest.prototype.getGuidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dbmsCore.DeleteRequest} returns this
 */
proto.dbmsCore.DeleteRequest.prototype.setGuidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.DeleteRequest} returns this
 */
proto.dbmsCore.DeleteRequest.prototype.addGuids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.DeleteRequest} returns this
 */
proto.dbmsCore.DeleteRequest.prototype.clearGuidsList = function() {
  return this.setGuidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.Row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.Row} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.Row}
 */
proto.dbmsCore.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.Row;
  return proto.dbmsCore.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.Row}
 */
proto.dbmsCore.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.Row.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.Row} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.Row.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string items = 1;
 * @return {!Array<string>}
 */
proto.dbmsCore.Row.prototype.getItemsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dbmsCore.Row} returns this
 */
proto.dbmsCore.Row.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Row} returns this
 */
proto.dbmsCore.Row.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.Row} returns this
 */
proto.dbmsCore.Row.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.InsertRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.InsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.InsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.InsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.InsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.dbmsCore.Row.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.InsertRequest}
 */
proto.dbmsCore.InsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.InsertRequest;
  return proto.dbmsCore.InsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.InsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.InsertRequest}
 */
proto.dbmsCore.InsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = new proto.dbmsCore.Row;
      reader.readMessage(value,proto.dbmsCore.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.InsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.InsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.InsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.InsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dbmsCore.Row.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.InsertRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.InsertRequest} returns this
 */
proto.dbmsCore.InsertRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.InsertRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.InsertRequest} returns this
 */
proto.dbmsCore.InsertRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Row rows = 3;
 * @return {!Array<!proto.dbmsCore.Row>}
 */
proto.dbmsCore.InsertRequest.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.dbmsCore.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Row, 3));
};


/**
 * @param {!Array<!proto.dbmsCore.Row>} value
 * @return {!proto.dbmsCore.InsertRequest} returns this
*/
proto.dbmsCore.InsertRequest.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dbmsCore.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Row}
 */
proto.dbmsCore.InsertRequest.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dbmsCore.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.InsertRequest} returns this
 */
proto.dbmsCore.InsertRequest.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.ConditionsFieldEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.ConditionsFieldEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.ConditionsFieldEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.ConditionsFieldEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    proto.dbmsCore.Validator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.ConditionsFieldEntry}
 */
proto.dbmsCore.ConditionsFieldEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.ConditionsFieldEntry;
  return proto.dbmsCore.ConditionsFieldEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.ConditionsFieldEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.ConditionsFieldEntry}
 */
proto.dbmsCore.ConditionsFieldEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.dbmsCore.Validator;
      reader.readMessage(value,proto.dbmsCore.Validator.deserializeBinaryFromReader);
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.ConditionsFieldEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.ConditionsFieldEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.ConditionsFieldEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dbmsCore.Validator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.ConditionsFieldEntry} returns this
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Validator value = 2;
 * @return {!Array<!proto.dbmsCore.Validator>}
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.getValueList = function() {
  return /** @type{!Array<!proto.dbmsCore.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Validator, 2));
};


/**
 * @param {!Array<!proto.dbmsCore.Validator>} value
 * @return {!proto.dbmsCore.ConditionsFieldEntry} returns this
*/
proto.dbmsCore.ConditionsFieldEntry.prototype.setValueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dbmsCore.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Validator}
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.addValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dbmsCore.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.ConditionsFieldEntry} returns this
 */
proto.dbmsCore.ConditionsFieldEntry.prototype.clearValueList = function() {
  return this.setValueList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.UpdateRequest.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.dbmsCore.Row.toObject, includeInstance),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.dbmsCore.ConditionsFieldEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.UpdateRequest}
 */
proto.dbmsCore.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.UpdateRequest;
  return proto.dbmsCore.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.UpdateRequest}
 */
proto.dbmsCore.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = new proto.dbmsCore.Row;
      reader.readMessage(value,proto.dbmsCore.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 4:
      var value = new proto.dbmsCore.ConditionsFieldEntry;
      reader.readMessage(value,proto.dbmsCore.ConditionsFieldEntry.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.dbmsCore.Row.serializeBinaryToWriter
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dbmsCore.ConditionsFieldEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.UpdateRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.UpdateRequest} returns this
 */
proto.dbmsCore.UpdateRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.UpdateRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.UpdateRequest} returns this
 */
proto.dbmsCore.UpdateRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Row rows = 3;
 * @return {!Array<!proto.dbmsCore.Row>}
 */
proto.dbmsCore.UpdateRequest.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.dbmsCore.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Row, 3));
};


/**
 * @param {!Array<!proto.dbmsCore.Row>} value
 * @return {!proto.dbmsCore.UpdateRequest} returns this
*/
proto.dbmsCore.UpdateRequest.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.dbmsCore.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Row}
 */
proto.dbmsCore.UpdateRequest.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.dbmsCore.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.UpdateRequest} returns this
 */
proto.dbmsCore.UpdateRequest.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * repeated ConditionsFieldEntry conditions = 4;
 * @return {!Array<!proto.dbmsCore.ConditionsFieldEntry>}
 */
proto.dbmsCore.UpdateRequest.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.dbmsCore.ConditionsFieldEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.ConditionsFieldEntry, 4));
};


/**
 * @param {!Array<!proto.dbmsCore.ConditionsFieldEntry>} value
 * @return {!proto.dbmsCore.UpdateRequest} returns this
*/
proto.dbmsCore.UpdateRequest.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dbmsCore.ConditionsFieldEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.ConditionsFieldEntry}
 */
proto.dbmsCore.UpdateRequest.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dbmsCore.ConditionsFieldEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.UpdateRequest} returns this
 */
proto.dbmsCore.UpdateRequest.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.SelectRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    top: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.dbmsCore.ConditionsFieldEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.SelectRequest}
 */
proto.dbmsCore.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.SelectRequest;
  return proto.dbmsCore.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.SelectRequest}
 */
proto.dbmsCore.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.dbmsCore.ConditionsFieldEntry;
      reader.readMessage(value,proto.dbmsCore.ConditionsFieldEntry.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTop();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dbmsCore.ConditionsFieldEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.SelectRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.SelectRequest} returns this
 */
proto.dbmsCore.SelectRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.SelectRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.SelectRequest} returns this
 */
proto.dbmsCore.SelectRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 top = 3;
 * @return {number}
 */
proto.dbmsCore.SelectRequest.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.SelectRequest} returns this
 */
proto.dbmsCore.SelectRequest.prototype.setTop = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.dbmsCore.SelectRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.SelectRequest} returns this
 */
proto.dbmsCore.SelectRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ConditionsFieldEntry conditions = 5;
 * @return {!Array<!proto.dbmsCore.ConditionsFieldEntry>}
 */
proto.dbmsCore.SelectRequest.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.dbmsCore.ConditionsFieldEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.ConditionsFieldEntry, 5));
};


/**
 * @param {!Array<!proto.dbmsCore.ConditionsFieldEntry>} value
 * @return {!proto.dbmsCore.SelectRequest} returns this
*/
proto.dbmsCore.SelectRequest.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.dbmsCore.ConditionsFieldEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.ConditionsFieldEntry}
 */
proto.dbmsCore.SelectRequest.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.dbmsCore.ConditionsFieldEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.SelectRequest} returns this
 */
proto.dbmsCore.SelectRequest.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.UnionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.UnionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.UnionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.UnionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firsttablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secondtablename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.UnionRequest}
 */
proto.dbmsCore.UnionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.UnionRequest;
  return proto.dbmsCore.UnionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.UnionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.UnionRequest}
 */
proto.dbmsCore.UnionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirsttablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.UnionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.UnionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.UnionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.UnionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirsttablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecondtablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.UnionRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.UnionRequest} returns this
 */
proto.dbmsCore.UnionRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string firstTableName = 2;
 * @return {string}
 */
proto.dbmsCore.UnionRequest.prototype.getFirsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.UnionRequest} returns this
 */
proto.dbmsCore.UnionRequest.prototype.setFirsttablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string secondTableName = 3;
 * @return {string}
 */
proto.dbmsCore.UnionRequest.prototype.getSecondtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.UnionRequest} returns this
 */
proto.dbmsCore.UnionRequest.prototype.setSecondtablename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.CrossJoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.CrossJoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.CrossJoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.CrossJoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firsttablename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    secondtablename: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.CrossJoinRequest}
 */
proto.dbmsCore.CrossJoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.CrossJoinRequest;
  return proto.dbmsCore.CrossJoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.CrossJoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.CrossJoinRequest}
 */
proto.dbmsCore.CrossJoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirsttablename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondtablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.CrossJoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.CrossJoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.CrossJoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.CrossJoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirsttablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSecondtablename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.CrossJoinRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.CrossJoinRequest} returns this
 */
proto.dbmsCore.CrossJoinRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string firstTableName = 2;
 * @return {string}
 */
proto.dbmsCore.CrossJoinRequest.prototype.getFirsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.CrossJoinRequest} returns this
 */
proto.dbmsCore.CrossJoinRequest.prototype.setFirsttablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string secondTableName = 3;
 * @return {string}
 */
proto.dbmsCore.CrossJoinRequest.prototype.getSecondtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.CrossJoinRequest} returns this
 */
proto.dbmsCore.CrossJoinRequest.prototype.setSecondtablename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.SelectReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.SelectReply.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.SelectReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.SelectReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.SelectReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.dbmsCore.Row.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.SelectReply}
 */
proto.dbmsCore.SelectReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.SelectReply;
  return proto.dbmsCore.SelectReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.SelectReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.SelectReply}
 */
proto.dbmsCore.SelectReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    case 4:
      var value = new proto.dbmsCore.Row;
      reader.readMessage(value,proto.dbmsCore.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.SelectReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.SelectReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.SelectReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.SelectReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dbmsCore.Row.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.dbmsCore.SelectReply.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.SelectReply} returns this
 */
proto.dbmsCore.SelectReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.dbmsCore.SelectReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.SelectReply} returns this
 */
proto.dbmsCore.SelectReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stackTrace = 3;
 * @return {string}
 */
proto.dbmsCore.SelectReply.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.SelectReply} returns this
 */
proto.dbmsCore.SelectReply.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Row rows = 4;
 * @return {!Array<!proto.dbmsCore.Row>}
 */
proto.dbmsCore.SelectReply.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.dbmsCore.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dbmsCore.Row, 4));
};


/**
 * @param {!Array<!proto.dbmsCore.Row>} value
 * @return {!proto.dbmsCore.SelectReply} returns this
*/
proto.dbmsCore.SelectReply.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dbmsCore.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.Row}
 */
proto.dbmsCore.SelectReply.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dbmsCore.Row, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.SelectReply} returns this
 */
proto.dbmsCore.SelectReply.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.CreateDbRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.CreateDbRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.CreateDbRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.CreateDbRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sourcetype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.CreateDbRequest}
 */
proto.dbmsCore.CreateDbRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.CreateDbRequest;
  return proto.dbmsCore.CreateDbRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.CreateDbRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.CreateDbRequest}
 */
proto.dbmsCore.CreateDbRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootpath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourcetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.CreateDbRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.CreateDbRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.CreateDbRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.CreateDbRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSourcetype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dbmsCore.CreateDbRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.CreateDbRequest} returns this
 */
proto.dbmsCore.CreateDbRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rootPath = 2;
 * @return {string}
 */
proto.dbmsCore.CreateDbRequest.prototype.getRootpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.CreateDbRequest} returns this
 */
proto.dbmsCore.CreateDbRequest.prototype.setRootpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 fileSize = 3;
 * @return {number}
 */
proto.dbmsCore.CreateDbRequest.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.CreateDbRequest} returns this
 */
proto.dbmsCore.CreateDbRequest.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 sourceType = 4;
 * @return {number}
 */
proto.dbmsCore.CreateDbRequest.prototype.getSourcetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.CreateDbRequest} returns this
 */
proto.dbmsCore.CreateDbRequest.prototype.setSourcetype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.TableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.TableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.TableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.TableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.TableRequest}
 */
proto.dbmsCore.TableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.TableRequest;
  return proto.dbmsCore.TableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.TableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.TableRequest}
 */
proto.dbmsCore.TableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.TableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.TableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.TableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.TableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.TableRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.TableRequest} returns this
 */
proto.dbmsCore.TableRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tableName = 2;
 * @return {string}
 */
proto.dbmsCore.TableRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.TableRequest} returns this
 */
proto.dbmsCore.TableRequest.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.GetTableListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.GetTableListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.GetTableListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetTableListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.GetTableListRequest}
 */
proto.dbmsCore.GetTableListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.GetTableListRequest;
  return proto.dbmsCore.GetTableListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.GetTableListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.GetTableListRequest}
 */
proto.dbmsCore.GetTableListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.GetTableListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.GetTableListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.GetTableListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetTableListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string dbName = 1;
 * @return {string}
 */
proto.dbmsCore.GetTableListRequest.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetTableListRequest} returns this
 */
proto.dbmsCore.GetTableListRequest.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dbmsCore.GetTableListReply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.GetTableListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.GetTableListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.GetTableListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetTableListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tablesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.GetTableListReply}
 */
proto.dbmsCore.GetTableListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.GetTableListReply;
  return proto.dbmsCore.GetTableListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.GetTableListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.GetTableListReply}
 */
proto.dbmsCore.GetTableListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.GetTableListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.GetTableListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.GetTableListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.GetTableListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.dbmsCore.GetTableListReply.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.dbmsCore.GetTableListReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stackTrace = 3;
 * @return {string}
 */
proto.dbmsCore.GetTableListReply.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string tables = 4;
 * @return {!Array<string>}
 */
proto.dbmsCore.GetTableListReply.prototype.getTablesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.setTablesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.addTables = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dbmsCore.GetTableListReply} returns this
 */
proto.dbmsCore.GetTableListReply.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dbmsCore.BaseReply.prototype.toObject = function(opt_includeInstance) {
  return proto.dbmsCore.BaseReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dbmsCore.BaseReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.BaseReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dbmsCore.BaseReply}
 */
proto.dbmsCore.BaseReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dbmsCore.BaseReply;
  return proto.dbmsCore.BaseReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dbmsCore.BaseReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dbmsCore.BaseReply}
 */
proto.dbmsCore.BaseReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dbmsCore.BaseReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dbmsCore.BaseReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dbmsCore.BaseReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dbmsCore.BaseReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.dbmsCore.BaseReply.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dbmsCore.BaseReply} returns this
 */
proto.dbmsCore.BaseReply.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.dbmsCore.BaseReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.BaseReply} returns this
 */
proto.dbmsCore.BaseReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stackTrace = 3;
 * @return {string}
 */
proto.dbmsCore.BaseReply.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dbmsCore.BaseReply} returns this
 */
proto.dbmsCore.BaseReply.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.dbmsCore);
